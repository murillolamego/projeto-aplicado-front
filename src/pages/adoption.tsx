import dayjs from "dayjs";
import Head from "next/head";
import Image from "next/image";
import { ReactElement, useEffect, useState } from "react";

import { findAllBreedsByCategory, IPetBreed } from "@/services/petBreedService";
import {
  findAllPetCategories,
  IPetCategory,
} from "@/services/petCategoryService";
import { findAllPetsWithRelations, IPet } from "@/services/petService";
import {
  Avatar,
  Box,
  CircularProgress,
  FormControl,
  InputLabel,
  List,
  ListItem,
  MenuItem,
  Select,
  Typography,
} from "@mui/material";

export default function Signup(): ReactElement {
  // TODO implement useReducer
  const [initialPets, setInitialPets] = useState<IPet[]>([]);
  const [categories, setCategories] = useState<IPetCategory[]>([]);
  const [category, setCategory] = useState("");
  const [breeds, setBreeds] = useState<IPetBreed[]>([]);
  const [breed, setBreed] = useState("");
  const [age, setAge] = useState("");
  const [pets, setPets] = useState<IPet[]>([]);
  const [listLoading, setListLoading] = useState(true);

  const handleCategorySelect = async (event): Promise<void> => {
    setListLoading(true);
    setCategory(event.target.value as string);
    setBreeds([]);

    if (event.target.value != "all") {
      const petsFromCategory = initialPets.filter(
        (pet) => pet.categoryId === event.target.value,
      );

      setPets(petsFromCategory);

      const petBreeds: IPetBreed[] | undefined = await findAllBreedsByCategory(
        event.target.value,
      );

      if (petBreeds) {
        setBreeds(petBreeds);
      }
    } else {
      setPets(initialPets);
    }
    setListLoading(false);
  };

  const handleBreedSelect = async (event): Promise<void> => {
    setListLoading(true);
    setBreed(event.target.value as string);

    if (event.target.value != "all") {
      const petsFromBreed = initialPets.filter(
        (pet) => pet.breedId === event.target.value,
      );

      setPets(petsFromBreed);
    } else {
      const petsFromCategory = initialPets.filter(
        (pet) => pet.categoryId === category,
      );

      setPets(petsFromCategory);
    }
    setListLoading(false);
  };

  const handleAgeSelect = async (event): Promise<void> => {
    setAge(event.target.value as string);

    // TODO filter pets from AGE
  };

  const getAge = (birthdate) => {
    const now = dayjs();
    const birth = dayjs(birthdate);
    const years = now.diff(birth, "y");
    const months = Math.floor(now.diff(birth, "M", true) % 12);

    if (years < 1 && months < 2) {
      return `${months} month`;
    }
    if (years < 1 && months > 1) {
      return `${months} months`;
    }

    if (years == 1) {
      return `${years} year and ${months} month`;
    }
    if (years > 1) {
      return `${years} years and ${months} months`;
    }
  };

  useEffect(() => {
    (async (): Promise<void> => {
      if (initialPets.length === 0) {
        const initialPets = await findAllPetsWithRelations();

        if (initialPets) {
          setInitialPets(initialPets);
          setPets(initialPets);
          setListLoading(false);
        }
      }

      if (categories.length === 0) {
        const petCategories: IPetCategory[] | undefined =
          await findAllPetCategories();

        if (petCategories) {
          setCategories(petCategories);
        }
      }
    })();
  }, [pets, categories]);

  return (
    <>
      <Head>
        <title>Adopt a friend!</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center w-screen h-screen">
        <div className="container xl:max-w-screen-xl p-0 flex">
          <div className="flex flex-col h-screen items-start pe-3 border-r border-r-orange-400">
            <div className="relative w-24 h-24 lg:w-64 lg:h-64">
              <Image
                className="object-contain"
                src="/adopt.svg"
                alt="Drawing of a french bulldog sitting looking back at you"
                fill
                priority
              />
            </div>
            <Typography variant="h4" className="text-center font-bold">
              Adopt a friend!
            </Typography>
            <Box sx={{ minWidth: 120 }} className="w-full">
              <FormControl fullWidth className="my-3">
                <InputLabel id="demo-simple-category-select-label">
                  Category
                </InputLabel>
                <Select
                  labelId="demo-simple-category-select-label"
                  id="demo-simple-category-select"
                  disabled={categories.length === 0}
                  label="Category"
                  value={
                    category && categories.some((e) => e.id === category)
                      ? category
                      : "all"
                  }
                  onChange={(event): Promise<void> =>
                    handleCategorySelect(event)
                  }
                >
                  <MenuItem key={"all"} value={"all"}>
                    all
                  </MenuItem>
                  {categories.map((category) => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <FormControl fullWidth className="my-3">
                <InputLabel id="demo-simple-breed-select-label">
                  Breed
                </InputLabel>
                <Select
                  labelId="demo-simple-breed-select-label"
                  id="demo-simple-breed-select"
                  disabled={breeds.length === 0}
                  label="Breed"
                  value={
                    breed && breeds.some((e) => e.id === breed) ? breed : "all"
                  }
                  onChange={(event): Promise<void> => handleBreedSelect(event)}
                >
                  <MenuItem key={"all"} value={"all"}>
                    all
                  </MenuItem>
                  {breeds.map((breed) => (
                    <MenuItem key={breed.id} value={breed.id}>
                      {breed.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <FormControl fullWidth className="my-3">
                <InputLabel id="demo-simple-age-select-label">Age</InputLabel>
                <Select
                  labelId="demo-simple-age-select-label"
                  id="demo-simple-age-select"
                  disabled={!breed}
                  label="Age"
                  value=""
                  onChange={(event): Promise<void> => handleAgeSelect(event)}
                >
                  <MenuItem value={5}>any</MenuItem>
                  <MenuItem value={10}>0 - 6 months</MenuItem>
                  <MenuItem value={20}>6 months - 1 year</MenuItem>
                  <MenuItem value={30}>1 - 2 years</MenuItem>
                </Select>
              </FormControl>
            </Box>
          </div>
          {!listLoading ? (
            <List className="flex-auto h-max">
              {pets.map((pet) => (
                <ListItem
                  key={pet.id}
                  className="flex p-3 items-start border-b border-b-orange-400"
                >
                  <Avatar
                    className="object-contain border border-orange-400"
                    alt={pet?.name ? `${pet.name}'s avatar` : "Pet avatar"}
                    src={
                      pet?.avatar &&
                      `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/${pet?.avatar}`
                    }
                    sx={{
                      width: 80,
                      height: 80,
                      fontSize: 80,
                      objectFit: "contain",
                    }}
                  />
                  <div className="flex px-3 items-start flex-wrap">
                    <Typography variant="h6">{pet.name}</Typography>
                    <Typography variant="body1">
                      Category: {pet.Category?.name}
                    </Typography>
                    <Typography variant="body1">
                      Breed: {pet.Breed?.name}
                    </Typography>
                    <Typography variant="body1">
                      Birthdate: {getAge(pet.birthdate)}
                    </Typography>
                    <Typography variant="body1">
                      Guardian: {pet.Guardian?.name}
                    </Typography>
                  </div>
                </ListItem>
              ))}
              {pets.length === 0 && (
                <ListItem>
                  <Typography variant="body1">
                    No pets meet the criteria
                  </Typography>
                </ListItem>
              )}
            </List>
          ) : (
            <CircularProgress className="m-auto" />
          )}
        </div>
      </main>
    </>
  );
}
