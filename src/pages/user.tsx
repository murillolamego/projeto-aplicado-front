import dayjs from "dayjs";
import Head from "next/head";
import Link from "next/link";
import { useSnackbar } from "notistack";
import { ReactElement, useContext, useEffect, useState, Fragment } from "react";

import { IMAGE_TYPE } from "@/components/forms/formUserMoreInfo";
import { AuthContext } from "@/contexts/AuthContext";
import { IUser } from "@/contexts/UserSignupContext";
import { findAllByCategory, IPetBreed } from "@/services/petBreedService";
import {
  findAllPetCategories,
  IPetCategory,
} from "@/services/petCategoryService";
import { addPet, IPet } from "@/services/petService";
import { findUserById, getUserPets } from "@/services/userService";
import { PhotoCamera } from "@mui/icons-material";
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
import DeleteIcon from "@mui/icons-material/Delete";
import {
  Avatar,
  Box,
  Button,
  FormControl,
  IconButton,
  InputLabel,
  List,
  ListItem,
  MenuItem,
  Modal,
  Select,
  TextField,
  Typography,
} from "@mui/material";
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";

export default function Dashboard(): ReactElement {
  const { user, setUser } = useContext(AuthContext);

  const [pets, setPets] = useState<IPet[]>([]);

  const [pet, setPet] = useState<IPet>({
    username: "",
    name: "",
    birthdate: "",
    avatar: "",
    categoryId: "",
    breedId: "",
    guardianId: "",
  });

  const [petCategories, setPetCategories] = useState<IPetCategory[]>([]);

  const [petBreeds, setPetBreeds] = useState<IPetBreed[]>([]);

  const [file, setFile] = useState<File | null>(null);

  const { enqueueSnackbar } = useSnackbar();

  const [openCreatePet, setOpenCreatePet] = useState(false);
  const handleOpen = (): void => setOpenCreatePet(true);
  const handleClose = (): void => setOpenCreatePet(false);

  const handleAddPet = async (): Promise<void> => {
    console.log("ADD PET");
    const data = await addPet(pet, file);

    if (data) {
      console.log("CREATED USER", user);
      enqueueSnackbar({
        message: "Pet successfully added",
        variant: "success",
      });
      handleClose();
    } else {
      enqueueSnackbar({
        message: "Failed to add pet",
        variant: "error",
      });
    }
  };

  const fileHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const file = e.target.files[0];
      if (!file?.type.match(IMAGE_TYPE)) {
        enqueueSnackbar({
          message: "Image type not supported",
          variant: "error",
        });
        return;
      }
      setFile(file);

      let fileReader: FileReader;
      let isCancel = false;
      if (file) {
        fileReader = new FileReader();
        fileReader.onload = (e) => {
          const { result } = e.target;
          if (result && !isCancel) {
            setPet({ ...pet, avatar: result });
            enqueueSnackbar({
              message: "Looks great!",
              variant: "success",
            });
          }
        };
        fileReader.readAsDataURL(file);
      }
      return () => {
        isCancel = true;
        if (fileReader && fileReader.readyState === 1) {
          fileReader.abort();
        }
      };
    }
  };

  useEffect(() => {
    (async (): Promise<void> => {
      if (user && !user?.name) {
        setPet({ ...pet, guardianId: user.sub });
        const updatedUser: IUser | undefined = await findUserById(user?.sub);

        if (updatedUser) {
          setUser(Object.assign(updatedUser, user));
        }
      }

      if (user && !user.pets) {
        const pets = await getUserPets(user?.sub);

        if (pets) {
          setPets(pets);
          user.pets = pets;
          setUser(user);
        }
        console.log("USER with pets", user);
      }

      if (petCategories.length === 0) {
        const petCategories = await findAllPetCategories();

        if (petCategories) {
          setPetCategories(petCategories);
        }
      }

      if (pet.categoryId && petBreeds.length === 0) {
        const petBreeds = await findAllByCategory(pet.categoryId);

        if (petBreeds) {
          setPetBreeds(petBreeds);
        }
      }
    })();
  }, [user, setUser, pet, pets, petCategories, petBreeds]);

  return (
    <>
      <Head>
        <title>{user?.name}&apos;s profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex p-0 justify-center w-screen h-screen">
        <div className="container xl:max-w-screen-xl p-0 flex">
          <div className="flex flex-col h-screen items-start border-r border-r-orange-400">
            <>
              <div className="py-2">
                <Avatar
                  className="mx-auto object-contain border border-orange-400"
                  alt={user?.name ? `${user.name}'s avatar` : "User avatar"}
                  src={
                    user?.avatar &&
                    `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/${user?.avatar}`
                  }
                  sx={{
                    width: 180,
                    height: 180,
                    fontSize: 120,
                    objectFit: "contain",
                  }}
                />
                <Typography variant="h4" className="text-center font-bold">
                  {user?.name}
                </Typography>
                <Typography variant="h6" className="text-center font-bold">
                  @{user?.username}
                </Typography>
              </div>
              <List className="flex flex-wrap justify-start items-start h-max">
                <h2>Pets</h2>
                <IconButton
                  color="primary"
                  aria-label="upload picture"
                  component="label"
                  onClick={handleOpen}
                >
                  <AddCircleOutlineIcon />
                </IconButton>
                {user &&
                  user.pets &&
                  user.pets.map((pet, index) => (
                    <Fragment key={pet.id}>
                      {(index === 0 ||
                        pet.Category?.id !=
                          user?.pets[index - 1].Category?.id) && (
                        <ListItem>
                          <Typography
                            variant="h5"
                            className=" capitalize"
                            key={pet.Category?.id}
                          >
                            {pet.Category?.name}
                          </Typography>
                        </ListItem>
                      )}
                      <ListItem className="w-fit p-1">
                        <Link href={`/pet/${pet.username}`}>
                          <Avatar
                            className="object-contain border border-orange-400"
                            alt={
                              pet?.name ? `${pet.name}'s avatar` : "User avatar"
                            }
                            src={
                              pet?.avatar &&
                              `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/${pet?.avatar}`
                            }
                            sx={{
                              width: 80,
                              height: 80,
                              fontSize: 80,
                              objectFit: "contain",
                              cursor: "pointer",
                            }}
                          />
                          <Typography variant="h6" className="text-center">
                            {pet.name}
                          </Typography>
                        </Link>
                      </ListItem>
                    </Fragment>
                  ))}
              </List>
            </>
            <Modal
              open={openCreatePet}
              onClose={handleClose}
              aria-labelledby="modal-modal-title"
              aria-describedby="modal-modal-description"
            >
              <Box
                component="form"
                sx={{
                  "& .MuiTextField-root": {
                    m: 1,
                    width: "25ch",
                  },
                }}
                noValidate
                autoComplete="off"
                className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-md p-8 flex-row items-center"
              >
                <div className="relative w-fit mx-auto">
                  <label htmlFor="inputFile">
                    <Avatar
                      className="object-contain border border-orange-400"
                      alt={pet?.name ? `${pet.name}'s avatar` : "User avatar"}
                      src={pet?.avatar}
                      sx={{
                        width: 180,
                        height: 180,
                        fontSize: 120,
                        objectFit: "contain",
                        cursor: "pointer",
                      }}
                    />
                  </label>
                  <IconButton
                    className="absolute start-0 bottom-0"
                    color="primary"
                    aria-label="upload avatar"
                    component="label"
                  >
                    <input
                      hidden
                      id="inputFile"
                      name="inputFile"
                      accept="image/*"
                      type="file"
                      onChange={(e): void => {
                        fileHandler(e);
                        e.target.value = "";
                      }}
                    />
                    <PhotoCamera sx={{ fontSize: 32 }} />
                  </IconButton>
                  <IconButton
                    className="absolute end-0 bottom-0"
                    color="primary"
                    aria-label="delete avatar"
                    component="label"
                    onClick={(): void => {
                      setPet({ ...pet, avatar: "" });
                      setFile(null);
                    }}
                  >
                    <DeleteIcon sx={{ fontSize: 32 }} />
                  </IconButton>
                </div>
                <TextField
                  required
                  type="text"
                  label="Pet's name"
                  placeholder="Pet's name"
                  value={pet?.username && pet.username}
                  onChange={(e): void =>
                    setPet({ ...pet, username: e.target.value })
                  }
                />
                <TextField
                  required
                  type="text"
                  label="Username"
                  placeholder="Pet's username"
                  value={pet?.name && pet.name}
                  onChange={(e): void =>
                    setPet({ ...pet, name: e.target.value })
                  }
                />

                <FormControl required sx={{ m: 1, minWidth: 120 }}>
                  <InputLabel id="demo-simple-select-required-label">
                    Category
                  </InputLabel>
                  <Select
                    labelId="demo-simple-select-required-label"
                    id="demo-simple-select-required"
                    label="Category *"
                    disabled={petCategories.length < 1}
                    value={pet.categoryId || ""}
                    onChange={(e): void => {
                      setPetBreeds([]);
                      setPet({
                        ...pet,
                        categoryId: e.target.value,
                        breedId: "",
                      });
                    }}
                  >
                    {petCategories.map((petCategory) => (
                      <MenuItem key={petCategory.id} value={petCategory.id}>
                        {petCategory.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>

                <FormControl required sx={{ m: 1, minWidth: 120 }}>
                  <InputLabel id="demo-simple-select-required-label">
                    Breed
                  </InputLabel>
                  <Select
                    labelId="demo-simple-select-required-label"
                    id="demo-simple-select-required"
                    label="Category *"
                    disabled={petBreeds.length < 1}
                    value={pet.breedId || ""}
                    onChange={(e): void =>
                      setPet({ ...pet, breedId: e.target.value })
                    }
                  >
                    {petBreeds.map((petBreed) => (
                      <MenuItem key={petBreed.id} value={petBreed.id}>
                        {petBreed.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>

                <LocalizationProvider dateAdapter={AdapterDayjs}>
                  <DatePicker
                    label="Pet's birthday"
                    format="DD/MM/YYYY"
                    onChange={(birthdate): void => {
                      setPet({
                        ...pet,
                        birthdate: dayjs(birthdate as string).toString(),
                      });
                      console.log("PET AGE", pet.birthdate);
                    }}
                  />
                </LocalizationProvider>

                <Button onClick={handleAddPet} sx={{ mr: 1 }}>
                  Sign up
                </Button>
              </Box>
            </Modal>
          </div>
          <List className="flex-auto h-max">
            <ListItem className="flex p-3 items-start border-b border-b-orange-400">
              <Avatar
                className="object-contain border border-orange-400"
                alt={user?.name ? `${user.name}'s avatar` : "User avatar"}
                src={
                  user?.avatar &&
                  `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/${user?.avatar}`
                }
                sx={{
                  width: 80,
                  height: 80,
                  fontSize: 80,
                  objectFit: "contain",
                }}
              />
              <div className="flex px-3 items-start flex-wrap">
                <Typography variant="h6">{user?.name}</Typography>
                <Typography variant="body1">
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  Aliquam mattis, ante vel pretium vulputate, ligula ipsum
                  eleifend augue, vel sagittis eros risus a felis. Morbi pretium
                  tincidunt lacinia.
                </Typography>
              </div>
            </ListItem>
            <ListItem className="flex p-3 items-start border-b border-b-orange-400">
              <Avatar
                className="object-contain border border-orange-400"
                alt={user?.name ? `${user.name}'s avatar` : "User avatar"}
                src={
                  user?.avatar &&
                  `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/${user?.avatar}`
                }
                sx={{
                  width: 80,
                  height: 80,
                  fontSize: 80,
                  objectFit: "contain",
                }}
              />
              <div className="flex px-3 items-start flex-wrap">
                <Typography variant="h6">{user?.name}</Typography>
                <Typography variant="body1">
                  orem ipsum dolor sit amet, consectetur adipiscing elit.
                  Vestibulum fringilla nunc nec augue ultrices scelerisque. Nam
                  nec sem ac urna finibus venenatis a ut odio. Nulla facilisi.
                  Etiam nunc libero, sodales ac tincidunt tempus, blandit vitae
                  lacus. Sed ut finibus nibh. Curabitur non pharetra nisl.
                  Quisque rhoncus turpis venenatis, lacinia nulla a, volutpat
                  nunc.
                </Typography>
              </div>
            </ListItem>
          </List>
        </div>
      </main>
    </>
  );
}
