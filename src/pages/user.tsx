import Head from "next/head";
import Link from "next/link";
import { ReactElement, useContext, useEffect, useState, Fragment } from "react";

import { AuthContext } from "@/contexts/AuthContext";
import { IUser } from "@/contexts/UserSignupContext";
import { IPet } from "@/services/petService";
import { findUserById, getUserPets } from "@/services/userService";
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
import { Avatar, Box, IconButton, Modal, TextField } from "@mui/material";

export default function Dashboard(): ReactElement {
  const { user, setUser } = useContext(AuthContext);

  const [pets, setPets] = useState<IPet[]>([]);

  const [pet, setPet] = useState<IPet | null>(null);

  const [openCreatePet, setOpenCreatePet] = useState(false);
  const handleOpen = (): void => setOpenCreatePet(true);
  const handleClose = (): void => setOpenCreatePet(false);

  useEffect(() => {
    (async (): Promise<void> => {
      if (user && !user?.name) {
        const updatedUser: IUser | undefined = await findUserById(user?.sub);

        if (updatedUser) {
          setUser(Object.assign(updatedUser, user));
        }
      }

      if (user && pets.length === 0) {
        const pets = await getUserPets(user?.sub);

        if (pets) {
          setPets(pets);
          user.pets = pets;
          setUser(user);
        }
        console.log("USER with pets", user);
      }
    })();
  }, [user, setUser, pets]);

  return (
    <>
      <Head>
        <title>{user?.name}&apos;s profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex items-center justify-center w-screen h-screen">
        <div className="container flex items-center justify-center">
          <div>
            <>
              <Avatar
                className="object-contain border-gray-400"
                alt={user?.name ? `${user.name}'s avatar` : "User avatar"}
                src={
                  user?.avatar &&
                  `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/${user?.avatar}`
                }
                sx={{
                  width: 180,
                  height: 180,
                  fontSize: 120,
                  objectFit: "contain",
                }}
              />
              <h1 className="font-bold text-4xl">{user?.name}</h1>
              <h2>Pets</h2>
              <IconButton
                color="primary"
                aria-label="upload picture"
                component="label"
                onClick={handleOpen}
              >
                <AddCircleOutlineIcon />
              </IconButton>
              <ul>
                {pets.map((pet, index) => (
                  <Fragment key={pet.id}>
                    {(index === 0 ||
                      pet.Category.id != pets[index - 1].Category.id) && (
                      <h3 className="bg-slate-400" key={pet.Category.id}>
                        {pet.Category.name}
                      </h3>
                    )}
                    <li className="flex items-center">
                      <Link href={`/pet/${pet.username}`}>
                        <Avatar
                          className="object-contain border-gray-400"
                          alt={
                            user?.name ? `${user.name}'s avatar` : "User avatar"
                          }
                          src={
                            user?.avatar &&
                            `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/${user?.avatar}`
                          }
                          sx={{
                            width: 40,
                            height: 40,
                            fontSize: 40,
                            objectFit: "contain",
                            cursor: "pointer",
                          }}
                        />
                        {pet.name}
                      </Link>
                    </li>
                  </Fragment>
                ))}
              </ul>
            </>
            <Modal
              open={openCreatePet}
              onClose={handleClose}
              aria-labelledby="modal-modal-title"
              aria-describedby="modal-modal-description"
            >
              <Box
                component="form"
                sx={{
                  "& .MuiTextField-root": {
                    m: 1,
                    width: "25ch",
                  },
                }}
                noValidate
                autoComplete="off"
              >
                <TextField
                  required
                  type="text"
                  label="Name"
                  placeholder="Your name"
                  value={pet?.username && pet.username}
                  onChange={(e): void =>
                    setPet({ ...pet, username: e.target.value })
                  }
                />
              </Box>
            </Modal>
          </div>
          <div>Feed</div>
        </div>
      </main>
    </>
  );
}
